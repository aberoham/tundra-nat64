# ----- Tundra-NAT64 example configuration file -----

# Tundra can be instructed to stop reading the configuration file (before the end of the file) using a line containing
# only the string "!STOP" (without the quotation marks, case-sensitive). If such line is encountered, the program stops
# reading the config file immediately and the open file is closed. This can be useful for example when the program's
# config is read from a named pipe, standard input etc.





# The number of threads used to translate packets.
# If left empty, the number of CPUs (cores, SMT threads, ...) your device has is used.
# NOTE: See the documentation of the 'io.mode' configuration option below to find out how the translator behaves when
# more than one translator thread is configured.
program.translator_threads =

# The name of a user/group to which Tundra will drop its privileges after it initializes.
# If left empty, no privilege drop is performed.
program.privilege_drop_user =
program.privilege_drop_group =





# Specifies the "means" by which the translator will receive and send packets.
# There are two I/O modes: 'inherited-fds' and 'tun'.
#
# In the 'tun' I/O mode, Tundra initializes a TUN network interface according to the io.tun.* configuration options
# specified below, and uses it to receive and send packets.
#
# In the 'inherited-fds' I/O mode, Tundra inherits file descriptors from the program that executed it - their numbers
# are passed to Tundra using the '-f' or '--io-inherited-fds' command-line option:
#  -f, --io-inherited-fds=THREAD1_IN,THREAD1_OUT[;THREAD2_IN,THREAD2_OUT]...
# Each translator thread is assigned a pair of file descriptors that it will then use to receive (THREAD*_IN) and send
# (THREAD*_OUT) packets (therefore, you must pass as many file descriptor pairs to the program as there are translator
# threads). Keep in mind that the program is primarily designed to work with TUN interface's file descriptors;
# therefore, the inherited ones must behave similarly, namely:
#  - each read() call on THREAD*_IN file descriptor must return a single whole packet
#  - each write() call on THREAD*_OUT file descriptor must accept a single whole packet up to MTU bytes in size
# This means that only file descriptors which preserve message boundaries and have sufficient read/write buffers may be
# used. Specifically, datagram (!) sockets created using socketpair(AF_UNIX, SOCK_DGRAM) whose buffers' sizes have been
# properly adjusted using setsockopt(SO_RCVBUF) and setsockopt(SO_SNDBUF) meet these requirements (whereas, for example,
# pipes do not, since they do not preserve message boundaries). Only blocking file descriptors may be used.
io.mode = tun

# The path of the character device through which is the TUN/TAP driver exposed.
# If left empty, the well-known path of /dev/net/tun is used.
io.tun.device_path =

# The name of the TUN network interface Tundra will use to receive and send packets. Must not be left empty.
io.tun.interface_name = tundra

# The name of a user/group who will own persistent TUN interfaces created by Tundra.
# If left empty, TUN interfaces created by Tundra will not have their ownership set.
io.tun.owner_user =
io.tun.owner_group =

# Specifies whether the TUN network interface created by Tundra will have multiple packet queues.
# In single-queue mode, Tundra acquires a single file descriptor to the TUN interface, which is then shared by all
#  translator threads. Since this naturally causes a load-balancing behaviour, this mode is much faster in the vast
#  majority of environments; therefore, 'io.tun.multi_queue' is set to 'no' by default, implying the single-queue mode.
# In multi-queue mode, each translator thread is given its own file descriptor to the TUN interface (which is created
#  with the 'IFF_MULTI_QUEUE' flag set). As mentioned before, this mode is usually much slower, as the kernel puts
#  packets belonging to a single flow/connection to the same queue and therefore does not do load-balancing.
#  In addition, multi-queue TUN interfaces tend to have a far larger memory footprint - beware of this when deploying
#  this program on very-low-memory devices, such as cheap SOHO routers with OpenWRT.
io.tun.multi_queue = no



# In certain cases, the translator needs to behave as a router and therefore be able to send ICMP messages.
# The 'router.ipv4' and 'router.ipv6' options specify the source IP addresses, and the 'router.generated_packet_ttl'
# option specifies the TTL/hop limit of ICMP packets originating from the translator.
router.ipv4 = 192.168.64.1
router.ipv6 = fd00:6464::1
router.generated_packet_ttl = 224





# --- NAT64 ---
# In the 'nat64' addressing mode, packets' IP addresses are (statelessly) translated the following way:
# * IPv6-Packet(src='addressing.nat64_clat.ipv6', dst='addressing.nat64_clat_siit.prefix' + any-valid-IPv4-address) --> IPv4-Packet(src='addressing.nat64_clat.ipv4', dst=the-valid-IPv4-address)
# * IPv4-Packet(src=any-valid-IPv4-address, dst='addressing.nat64_clat.ipv4') --> IPv6-Packet(src='addressing.nat64_clat_siit.prefix' + the-valid-IPv4-address, dst='addressing.nat64_clat.ipv6')
#
# The length of 'addressing.nat64_clat_siit.prefix' is fixed to be 96 bits (/96), which is probably the only prefix
# length used in production deployments. The length shall not be specified in the option's value. Tundra does not
# support other prefix lengths. If you leave the prefix option empty, the program will try to auto-discover it
# using the DNS name "ipv4only.arpa." (see RFC 7050).
# RFC 6052 states that the well-known prefix (64:ff9b::/96) must not be used to represent non-global IPv4 addresses.
# For this reason, Tundra offers the 'addressing.nat64_clat_siit.allow_translation_of_private_ips' option which should
# be set to 'no' if you are using the well-known prefix (which will cause all packets containing problematic addresses
# to be silently dropped). Keep in mind that the option only affects IPv4 addresses embedded into the prefix -
# 'addressing.nat64_clat.ipv4' and 'router.ipv4' can be private even if the option is set to 'no'.
#
# Tundra itself cannot act as a NAT64 translator for more than one host, as it lacks an internal dynamic address
# pool from which it would assign addresses to hosts needing its service - it only uses the single IPv4 and IPv6
# address configurable below. However, you can use Tundra in cooperation with Linux's in-kernel NAT66, which can
# masquerade a whole network requesting NAT64 service behind 'addressing.nat64_clat.ipv6', for example:
#  ip6tables -t nat -A POSTROUTING -d 64:ff9b::/96 -o tundra -j SNAT --to-source=fd00:6464::2
addressing.mode = nat64
addressing.nat64_clat.ipv4 = 192.168.64.2
addressing.nat64_clat.ipv6 = fd00:6464::2
addressing.nat64_clat_siit.prefix = 64:ff9b::
addressing.nat64_clat_siit.allow_translation_of_private_ips = no


# --- CLAT ---
# In the 'clat' addressing mode, packets' IP addresses are (statelessly) translated the following way:
# * IPv4-Packet(src='addressing.nat64_clat.ipv4', dst=any-valid-IPv4-address) --> IPv6-Packet(src='addressing.nat64_clat.ipv6', dst='addressing.nat64_clat_siit.prefix' + the-valid-IPv4-address)
# * IPv6-Packet(src='addressing.nat64_clat_siit.prefix' + any-valid-IPv4-address, dst='addressing.nat64_clat.ipv6') --> IPv4-Packet(src=the-valid-IPv4-address, dst='addressing.nat64_clat.ipv4')
#
# The length of 'addressing.nat64_clat_siit.prefix' is fixed to be 96 bits (/96), which is probably the only prefix
# length used in production deployments. The length shall not be specified in the option's value. Tundra does not
# support other prefix lengths. If you leave the prefix option empty, the program will try to auto-discover it
# using the DNS name "ipv4only.arpa." (see RFC 7050).
# RFC 6052 states that the well-known prefix (64:ff9b::/96) must not be used to represent non-global IPv4 addresses.
# For this reason, Tundra offers the 'addressing.nat64_clat_siit.allow_translation_of_private_ips' option which should
# be set to 'no' if you are using the well-known prefix (which will cause all packets containing problematic addresses
# to be silently dropped). Keep in mind that the option only affects IPv4 addresses embedded into the prefix -
# 'addressing.nat64_clat.ipv4' and 'router.ipv4' can be private even if the option is set to 'no'.
#
# Tundra itself cannot act as a CLAT translator for more than one host, as it lacks an internal dynamic address
# pool from which it would assign addresses to hosts needing its service - it only uses the single IPv4 and IPv6
# address configurable below. However, you can use Tundra in cooperation with Linux's in-kernel NAT44, which can
# masquerade a whole network requesting CLAT service behind 'addressing.nat64_clat.ipv4', for example:
#  iptables -t nat -A POSTROUTING -o tundra -j SNAT --to-source=192.168.46.2
#addressing.mode = clat
#addressing.nat64_clat.ipv4 = 192.168.46.2
#addressing.nat64_clat.ipv6 = fd00:4646::2
#addressing.nat64_clat_siit.prefix = 64:ff9b::
#addressing.nat64_clat_siit.allow_translation_of_private_ips = no


# --- SIIT ---
# In the 'siit' addressing mode, packets' IP addresses are (statelessly) translated the following way:
# * IPv4-Packet(src=any-valid-IPv4-address, dst=any-valid-IPv4-address) --> IPv6-Packet(src='addressing.nat64_clat_siit.prefix' + the-valid-IPv4-address, dst='addressing.nat64_clat_siit.prefix' + the-valid-IPv4-address)
# * IPv6-Packet(src='addressing.nat64_clat_siit.prefix' + any-valid-IPv4-address, dst='addressing.nat64_clat_siit.prefix' + any-valid-IPv4-address) --> IPv4-Packet(src=the-valid-IPv4-address, dst=the-valid-IPv4-address)
#
# The length of 'addressing.nat64_clat_siit.prefix' is fixed to be 96 bits (/96), which is probably the only prefix
# length used in production deployments. The length shall not be specified in the option's value. Tundra does not
# support other prefix lengths. If you leave the prefix option empty, the program will try to auto-discover it
# using the DNS name "ipv4only.arpa." (see RFC 7050).
# RFC 6052 states that the well-known prefix (64:ff9b::/96) must not be used to represent non-global IPv4 addresses.
# For this reason, Tundra offers the 'addressing.nat64_clat_siit.allow_translation_of_private_ips' option which should
# be set to 'no' if you are using the well-known prefix (which will cause all packets containing problematic addresses
# to be silently dropped). Keep in mind that the option only affects IPv4 addresses embedded into the prefix -
# 'router.ipv4' can be private even if the option is set to 'no'.
#addressing.mode = siit
#addressing.nat64_clat_siit.prefix = 64:ff9b::
#addressing.nat64_clat_siit.allow_translation_of_private_ips = no


# --- External address translation ----
# In the 'external' addressing mode, Tundra delegates address translation to another program-server, with which it
# communicates via inherited file descriptors, Unix stream sockets or TCP. In this mode, Tundra will translate packets
# from IPv4 to IPv6 and vice versa as per the rules of SIIT while querying an external address translator for IP
# addresses to be put in the translated packets. The specification of the protocol which Tundra uses to communicate
# with the external translator can be found in the 'external_addr_xlat/EXTERNAL-ADDR-XLAT-PROTOCOL.md' file in this
# project's Git repository (https://github.com/vitlabuda/tundra-nat64/).
#
# Since querying an external program, possibly even over a network, is very likely to be far slower than translating
# the addresses internally, Tundra offers the ability to cache received translated addresses for a short time in a
# rudimentary hash table. This has the benefit of not only making Tundra significantly faster, but also reducing the
# load of the "backend". The 'addressing.external.cache_size.*' options control the maximum number of cached addresses
# per translation thread per "direction" (4to6 vs. 6to4). If they are set to zero, the caching will be turned off, and
# the "backend" will be queried for every translated packet. 'addressing.external.cache_size.main_addresses' controls
# the caching of addresses within "main" packets (i.e. the packets which carry data), whereas
# 'addressing.external.cache_size.icmp_error_addresses' controls the caching of addresses within ICMP error packets,
# i.e. packets "in error" carried inside ICMP error messages' bodies.
#addressing.mode = external
#addressing.external.cache_size.main_addresses = 5000
#addressing.external.cache_size.icmp_error_addresses = 10

# In the 'inherited-fds' transport mode, Tundra communicates with an external address translator using pairs of file
# descriptors (each translator thread uses a single pair) inherited from a program that executed it - their numbers are
# passed to it using the '-F' or '--addressing-external-inherited-fds' command-line option:
#  -F, --addressing-external-inherited-fds=THREAD1_IN,THREAD1_OUT[;THREAD2_IN,THREAD2_OUT]...
# As documented in the protocol specification ("Tundra-NAT64's implementation details" section), the file descriptors
# should be referring to a "stream" communication channel, for example a pipe() or a SOCK_STREAM socket. Only blocking
# file descriptors may be used.
#addressing.external.transport = inherited-fds

# In the 'unix' transport mode, Tundra connects to an external address translator's Unix SOCK_STREAM server socket,
# whose path is specified through the 'addressing.external.unix.path' option. Keep in mind that connections to the
# socket are established after the program initializes, i.e. after it changes its working directory to '/' and drops
# its privileges, if it is configured to do so.
#addressing.external.transport = unix
#addressing.external.unix.path = /var/lib/tundra-nat64/external.sock
#addressing.external.unix_tcp.timeout_milliseconds = 400

# In the 'tcp' transport mode, Tundra connects to an external address translator's TCP server socket. Even though
# supplying a hostname instead of an IPv4/IPv6 address through the 'addressing.external.tcp.host' option is fully
# supported, it is not recommended, as it can lead to crashes during program initialization due to malfunctioning DNS.
#addressing.external.transport = tcp
#addressing.external.tcp.host = 127.0.0.1
#addressing.external.tcp.port = 6446
#addressing.external.unix_tcp.timeout_milliseconds = 800





# These options specify the maximum size (in bytes) a single IPv4/IPv6 packet can have when it is sent out by the
# translator.
# For IPv4, the lowest MTU you can specify is 96 bytes; for IPv6, it is 1280 bytes.
translator.ipv4.outbound_mtu = 1500
translator.ipv6.outbound_mtu = 1500

# IPv4 packets contain the ToS field and IPv6 packets contain the Traffic Class field, both of which nowadays normally
# consist of the DSCP (Differentiated Services Code Point) and ECN (Explicit Congestion Notification) fields. However,
# in some legacy networks, the IPv4 ToS field might be used with old semantics which are not compatible with IPv6. To
# prevent problems in such networks, Tundra can be instructed not to copy the fields over and zero them out instead
# using these options.
# In the vast majority of cases, however, this is not a problem, and so you can leave these options enabled.
translator.6to4.copy_dscp_and_ecn = yes
translator.4to6.copy_dscp_and_ecn = yes
